apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'kotlin-kapt'
apply plugin: 'eclipse'
apply plugin: 'io.spring.dependency-management'

group = 'com.pixelbumper'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", '-Xjvm-default=compatibility']
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", '-Xjvm-default=compatibility']
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://repo.spring.io/snapshot"
    }
    maven {
        url "https://repo.spring.io/milestone"
    }
}

dependencies {
    // kotlin TODO investigate why we have to force the dependency here
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion") {
        force = true
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion") {
        force = true
    }
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")

    //spring
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')

    // querydsl
    // TODO figure out why 'api' cannot be used instead of compile
    compile "com.querydsl:querydsl-jpa:$queryDslVersion"
    kapt "com.querydsl:querydsl-apt:$queryDslVersion:jpa"

    implementation group: 'com.h2database', name: 'h2', version: '1.4.194'
    
//    implementation('org.liquibase:liquibase-core')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

// add the classes generated by the annotation processors to the source set
sourceSets {
    main.java.srcDirs += [file("$buildDir/generated/source/kapt/main")]
}

// ensure spring dependency resolution works in this submodule, as the 'org.springframework.boot' plugin is not applied here
dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }
}

